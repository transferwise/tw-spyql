apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'com.github.spotbugs'
apply plugin: 'checkstyle'

group = 'com.transferwise.common'

ext.projectName = 'Transferwise Database Connection Spy'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "$projectName",
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext.springBootVersion = "2.5.8"

dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    compileOnly platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.5.2'

    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.projectlombok:lombok'
    testImplementation 'com.h2database:h2'
    testImplementation "org.springframework:spring-context"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-core:2.0-groovy-3.0"
    testImplementation 'org.slf4j:slf4j-simple'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardError"
        showStackTraces = true
        exceptionFormat = 'full'
    }
}

spotbugsMain {
    excludeFilter = file('../spotbugs-exclude.xml')
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs{
    effort = "max"
    spotbugsTest.enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    checkstyleTest.enabled = false
}

idea {
    module {
        excludeDirs += file('logs')
        excludeDirs += file('gradle')
        excludeDirs += file('build')
        excludeDirs += file('target')
        excludeDirs += file('.idea')
        excludeDirs += file('.gradle')
    }
}
