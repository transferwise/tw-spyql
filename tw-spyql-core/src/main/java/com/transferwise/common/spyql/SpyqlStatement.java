package com.transferwise.common.spyql;

import com.transferwise.common.spyql.utils.CallableWithSQLException;

import java.sql.*;

public class SpyqlStatement implements Statement {
    protected Statement statement;
    protected SpyqlConnection spyqlConnection;
    protected String batchSql;

    public SpyqlStatement(Statement statement, SpyqlConnection spyqlConnection) {
        this.statement = statement;
        this.spyqlConnection = spyqlConnection;
    }

    public int executeUpdate(String sql) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeUpdate(sql));
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeUpdate(sql, autoGeneratedKeys));
    }

    public long executeLargeUpdate(String sql, int[] columnIndexes) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeLargeUpdate(sql, columnIndexes));
    }

    public boolean execute(String sql, int[] columnIndexes) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.execute(sql, columnIndexes));
    }

    public long[] executeLargeBatch() throws java.sql.SQLException {
        return executeStatement(batchSql, () -> statement.executeLargeBatch());
    }

    public long executeLargeUpdate(String sql, String[] columnNames) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeLargeUpdate(sql, columnNames));
    }

    public boolean execute(String sql, String[] columnNames) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.execute(sql, columnNames));
    }

    public void addBatch(String sql) throws java.sql.SQLException {
        this.batchSql = sql;
        statement.addBatch(sql);
    }

    public int executeUpdate(String sql, String[] columnNames) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeUpdate(sql, columnNames));
    }

    public ResultSet executeQuery(String sql) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeQuery(sql));
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.execute(sql, autoGeneratedKeys));
    }

    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeLargeUpdate(sql, autoGeneratedKeys));
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeUpdate(sql, columnIndexes));
    }

    public boolean execute(String sql) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.execute(sql));
    }


    public int[] executeBatch() throws java.sql.SQLException {
        return executeStatement(batchSql, () -> statement.executeBatch());
    }

    public long executeLargeUpdate(String sql) throws java.sql.SQLException {
        return executeStatement(sql, () -> statement.executeLargeUpdate(sql));
    }

    //// Helper methods ////

    protected <T> T executeStatement(String sql, CallableWithSQLException<T> callable) throws SQLException {
        long startTimeNs = System.nanoTime();
        try {
            T result = callable.call();
            spyqlConnection.onStatementExecute(System.nanoTime() - startTimeNs, sql, null);
            return result;
        } catch (Throwable t) {
            spyqlConnection.onStatementExecute(System.nanoTime() - startTimeNs, sql, t);
            throw t;
        }
    }

    //// Default behaviour ////

    public void setEscapeProcessing(boolean enable) throws java.sql.SQLException {
        statement.setEscapeProcessing(enable);
    }

    public void clearBatch() throws java.sql.SQLException {
        statement.clearBatch();
    }

    public long getLargeMaxRows() throws java.sql.SQLException {
        return statement.getLargeMaxRows();
    }

    public void setLargeMaxRows(long max) throws java.sql.SQLException {
        statement.setLargeMaxRows(max);
    }

    public int getFetchSize() throws java.sql.SQLException {
        return statement.getFetchSize();
    }

    public boolean isCloseOnCompletion() throws java.sql.SQLException {
        return statement.isCloseOnCompletion();
    }

    public SQLWarning getWarnings() throws java.sql.SQLException {
        return statement.getWarnings();
    }

    public void setMaxFieldSize(int max) throws java.sql.SQLException {
        statement.setMaxFieldSize(max);
    }

    public boolean isWrapperFor(Class<?> iface) throws java.sql.SQLException {
        return statement.isWrapperFor(iface);
    }

    public void setCursorName(String name) throws java.sql.SQLException {
        statement.setCursorName(name);
    }

    public ResultSet getGeneratedKeys() throws java.sql.SQLException {
        return statement.getGeneratedKeys();
    }

    public int getResultSetHoldability() throws java.sql.SQLException {
        return statement.getResultSetHoldability();
    }

    public boolean isClosed() throws java.sql.SQLException {
        return statement.isClosed();
    }

    public void clearWarnings() throws java.sql.SQLException {
        statement.clearWarnings();
    }

    public <T> T unwrap(Class<T> iface) throws java.sql.SQLException {
        return statement.unwrap(iface);
    }

    public ResultSet getResultSet() throws java.sql.SQLException {
        return statement.getResultSet();
    }

    public int getResultSetType() throws java.sql.SQLException {
        return statement.getResultSetType();
    }

    public int getUpdateCount() throws java.sql.SQLException {
        return statement.getUpdateCount();
    }

    public void setQueryTimeout(int seconds) throws java.sql.SQLException {
        statement.setQueryTimeout(seconds);
    }

    public long getLargeUpdateCount() throws java.sql.SQLException {
        return statement.getLargeUpdateCount();
    }

    public void setFetchDirection(int direction) throws java.sql.SQLException {
        statement.setFetchDirection(direction);
    }

    public int getResultSetConcurrency() throws java.sql.SQLException {
        return statement.getResultSetConcurrency();
    }

    public int getMaxRows() throws java.sql.SQLException {
        return statement.getMaxRows();
    }

    public Connection getConnection() {
        return spyqlConnection;
    }

    public int getQueryTimeout() throws java.sql.SQLException {
        return statement.getQueryTimeout();
    }

    public void cancel() throws java.sql.SQLException {
        statement.cancel();
    }

    public void setMaxRows(int max) throws java.sql.SQLException {
        statement.setMaxRows(max);
    }

    public boolean getMoreResults() throws java.sql.SQLException {
        return statement.getMoreResults();
    }

    public boolean getMoreResults(int current) throws java.sql.SQLException {
        return statement.getMoreResults(current);
    }

    public void closeOnCompletion() throws java.sql.SQLException {
        statement.closeOnCompletion();
    }

    public int getFetchDirection() throws java.sql.SQLException {
        return statement.getFetchDirection();
    }

    public void setPoolable(boolean poolable) throws java.sql.SQLException {
        statement.setPoolable(poolable);
    }

    public void setFetchSize(int rows) throws java.sql.SQLException {
        statement.setFetchSize(rows);
    }

    public void close() throws java.sql.SQLException {
        statement.close();
    }

    public boolean isPoolable() throws java.sql.SQLException {
        return statement.isPoolable();
    }

    public int getMaxFieldSize() throws java.sql.SQLException {
        return statement.getMaxFieldSize();
    }
}
