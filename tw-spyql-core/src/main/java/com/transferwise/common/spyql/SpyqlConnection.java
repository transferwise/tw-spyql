package com.transferwise.common.spyql;

import com.transferwise.common.spyql.event.*;
import com.transferwise.common.spyql.listener.SpyqlConnectionListener;
import lombok.extern.slf4j.Slf4j;

import java.sql.*;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

@Slf4j
public class SpyqlConnection implements Connection {
    private List<SpyqlConnectionListener> connectionListeners;
    private Connection connection;
    private SpyqlDataSource spyqlDataSource;
    private long connectionId;
    private Long transactionId;

    public SpyqlConnection(SpyqlDataSource spyqlDataSource, Connection connection, List<SpyqlConnectionListener> connectionListeners,
                           long connectionId) {
        this.connection = connection;
        this.connectionListeners = connectionListeners;
        this.spyqlDataSource = spyqlDataSource;
        this.connectionId = connectionId;
    }

    public void close() throws SQLException {
        long startTimeNs = System.nanoTime();
        try {
            connection.close();
            onClose(System.nanoTime() - startTimeNs, null);
        } catch (Throwable t) {
            onClose(System.nanoTime() - startTimeNs, t);
            throw t;
        }
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        boolean implicitCommit = autoCommit && !connection.getAutoCommit() && isInTransaction();
        if (!implicitCommit) {
            connection.setAutoCommit(autoCommit);
        } else {
            long startTimeNs = System.nanoTime();
            try {
                connection.setAutoCommit(autoCommit);
                onCommit(System.nanoTime() - startTimeNs, null);
            } catch (Throwable t) {
                onCommit(System.nanoTime() - startTimeNs, t);
                throw t;
            }
        }
    }

    public void rollback() throws SQLException {
        long startTimeNs = System.nanoTime();
        try {
            connection.rollback();
            onRollback(System.nanoTime() - startTimeNs, null);

        } catch (Throwable t) {
            onRollback(System.nanoTime() - startTimeNs, t);
            throw t;
        }
    }

    public void commit() throws SQLException {
        long startTimeNs = System.nanoTime();
        try {
            connection.commit();
            onCommit(System.nanoTime() - startTimeNs, null);
        } catch (Throwable t) {
            onCommit(System.nanoTime() - startTimeNs, t);
            throw t;
        }
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        return new SpyqlCallableStatement(sql, connection.prepareCall(sql), this);
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new SpyqlStatement(connection.createStatement(resultSetType, resultSetConcurrency), this);
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new SpyqlPreparedStatement(sql, connection.prepareStatement(sql, columnIndexes), this);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new SpyqlPreparedStatement(sql, connection.prepareStatement(sql), this);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new SpyqlCallableStatement(sql, connection.prepareCall(sql, resultSetType, resultSetConcurrency), this);
    }

    public Statement createStatement() throws SQLException {
        return new SpyqlStatement(connection.createStatement(), this);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new SpyqlPreparedStatement(sql, connection.prepareStatement(sql, resultSetType, resultSetConcurrency), this);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new SpyqlPreparedStatement(sql, connection.prepareStatement(sql, autoGeneratedKeys), this);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new SpyqlPreparedStatement(sql, connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), this);
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new SpyqlStatement(connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), this);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new SpyqlCallableStatement(sql, connection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), this);
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new SpyqlPreparedStatement(sql, connection.prepareStatement(sql, columnNames), this);
    }

    //// Helper methods ////

    protected boolean isInTransaction() {
        return transactionId != null;
    }

    protected void onCommit(long timeTakenNs, Throwable t) {
        if (!isInTransaction()){
            onTransactionBegin(true);
        }
        if (t == null) {
            spyqlDataSource.onConnectionEvent(connectionListeners, new TransactionCommitEvent()
                .setExecutionTimeNs(timeTakenNs)
                .setConnectionId(connectionId)
                .setTransactionId(transactionId));

            transactionId = null;
        } else {
            spyqlDataSource.onConnectionEvent(connectionListeners, new TransactionCommitFailureEvent()
                .setExecutionTimeNs(timeTakenNs)
                .setConnectionId(connectionId)
                .setTransactionId(transactionId)
                .setThrowable(t));
        }
    }

    protected void onRollback(long timeTakenNs, Throwable t) {
        if (!isInTransaction()){
            onTransactionBegin(true);
        }

        if (t == null) {
            spyqlDataSource.onConnectionEvent(connectionListeners, new TransactionRollbackEvent()
                .setConnectionId(connectionId)
                .setTransactionId(transactionId)
                .setExecutionTimeNs(timeTakenNs));

            transactionId = null;
        } else {
            spyqlDataSource.onConnectionEvent(connectionListeners, new TransactionRollbackFailureEvent()
                .setConnectionId(connectionId)
                .setTransactionId(transactionId)
                .setExecutionTimeNs(timeTakenNs)
                .setThrowable(t));
        }
    }

    protected void onClose(long timeTakenNs, Throwable t) {
        if (t == null) {
            spyqlDataSource.onConnectionEvent(connectionListeners, new ConnectionCloseEvent()
                .setConnectionId(connectionId)
                .setTransactionId(transactionId)
                .setExecutionTimeNs(timeTakenNs));
        } else {
            spyqlDataSource.onConnectionEvent(connectionListeners, new ConnectionCloseFailureEvent()
                .setExecutionTimeNs(timeTakenNs)
                .setConnectionId(connectionId)
                .setTransactionId(transactionId)
                .setThrowable(t));
        }
    }

    protected void onTransactionBegin(boolean emptyTransaction) {
        transactionId = spyqlDataSource.nextTransactionId();

        spyqlDataSource.onConnectionEvent(connectionListeners, new TransactionBeginEvent()
            .setConnectionId(connectionId)
            .setTransactionId(transactionId)
            .setEmptyTransaction(emptyTransaction)
            .setTransactionDefinition(spyqlDataSource.getTransactionDefinition()));
    }

    protected void onStatementExecute(long timeTakenNs, String sql, Throwable t) throws SQLException {
        if (t == null) {
            if (!isInTransaction() && !connection.getAutoCommit()) {
                onTransactionBegin(false);
            }
            spyqlDataSource.onConnectionEvent(connectionListeners, new StatementExecuteEvent()
                .setConnectionId(connectionId)
                .setTransactionId(transactionId)
                .setExecutionTimeNs(timeTakenNs)
                .setSql(sql));
        } else {
            spyqlDataSource.onConnectionEvent(connectionListeners, new StatementExecuteFailureEvent()
                .setConnectionId(connectionId)
                .setTransactionId(transactionId)
                .setExecutionTimeNs(timeTakenNs)
                .setSql(sql)
                .setThrowable(t));
        }
    }

    //// Default behaviour ////

    public String getCatalog() throws SQLException {
        return connection.getCatalog();
    }

    public boolean getAutoCommit() throws SQLException {
        return connection.getAutoCommit();
    }

    public SQLXML createSQLXML() throws SQLException {
        return connection.createSQLXML();
    }

    public void clearWarnings() throws SQLException {
        connection.clearWarnings();
    }

    public void setTransactionIsolation(int level) throws SQLException {
        connection.setTransactionIsolation(level);
    }

    public void abort(Executor executor) throws SQLException {
        connection.abort(executor);
    }

    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        connection.setNetworkTimeout(executor, milliseconds);
    }

    public Savepoint setSavepoint() throws SQLException {
        return connection.setSavepoint();
    }

    // Not supported.
    public void rollback(Savepoint savepoint) throws SQLException {
        connection.rollback(savepoint);
    }

    // Not supported.
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        connection.releaseSavepoint(savepoint);
    }

    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        connection.setClientInfo(properties);
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return connection.isWrapperFor(iface);
    }

    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return connection.createStruct(typeName, attributes);
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
        connection.setReadOnly(readOnly);
    }

    public int getTransactionIsolation() throws SQLException {
        return connection.getTransactionIsolation();
    }

    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        connection.setClientInfo(name, value);
    }

    public void setHoldability(int holdability) throws SQLException {
        connection.setHoldability(holdability);
    }

    public NClob createNClob() throws SQLException {
        return connection.createNClob();
    }

    public int getNetworkTimeout() throws SQLException {
        return connection.getNetworkTimeout();
    }

    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return connection.createArrayOf(typeName, elements);
    }

    public void setCatalog(String catalog) throws SQLException {
        connection.setCatalog(catalog);
    }

    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return connection.getTypeMap();
    }


    public String nativeSQL(String sql) throws SQLException {
        return connection.nativeSQL(sql);
    }

    public Savepoint setSavepoint(String name) throws SQLException {
        return connection.setSavepoint(name);
    }

    public int getHoldability() throws SQLException {
        return connection.getHoldability();
    }

    public String getClientInfo(String name) throws SQLException {
        return connection.getClientInfo(name);
    }

    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        connection.setTypeMap(map);
    }

    public Blob createBlob() throws SQLException {
        return connection.createBlob();
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return connection.unwrap(iface);
    }

    public boolean isClosed() throws SQLException {
        return connection.isClosed();
    }

    public void setSchema(String schema) throws SQLException {
        connection.setSchema(schema);
    }

    public SQLWarning getWarnings() throws SQLException {
        return connection.getWarnings();
    }

    public boolean isValid(int timeout) throws SQLException {
        return connection.isValid(timeout);
    }

    public Properties getClientInfo() throws SQLException {
        return connection.getClientInfo();
    }

    public String getSchema() throws SQLException {
        return connection.getSchema();
    }

    public Clob createClob() throws SQLException {
        return connection.createClob();
    }

    public DatabaseMetaData getMetaData() throws SQLException {
        return connection.getMetaData();
    }

    public boolean isReadOnly() throws SQLException {
        return connection.isReadOnly();
    }
}
